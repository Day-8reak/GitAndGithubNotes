    What is git?

Git is open-spource and free "Source Control Management", also referred to SCM

Ex:
We want to fix a mistake on our website: 
so we can make a branch (another version of the website),
Then with this we can merge to our main after we're happy with the changes
We can then commit and then push those changes
- We can also revert back to a previous version if that wasn't a mistake

We can run git bash as a terminal, but we can use any terminal we want to
run git


    Git bash configuration startup:
config your name: git config --global user.name "Maxwell Huang"
email: git config --global user.email Maximumhuanging@gmail.com
default branch: git config --global init.default branch main

We can use clear as well, and we use cd to change directories
- to turn a given file into a git repo we type "git init"
When we do this it's still untracked, so git doesn't care

But, if you track a file, you can revert back to a previous version if you want to
- to track a file we write:
git add fileName
- to untrack a file we can:
git rm --cached fileName

To check the status of your repo (what's untracked and stuff):
git status


Whenever we change/add to/edit a file it will tell you after running "git status"
- This will move it from a file under "changes not staged for commit" to "changeds stages for commit


To untrack a file we can:
git rm --cached <fileName>


    .gitignore
To ignore certain files, folders, etc we can create a document named .gitignore 

To make sure certain files are being ignored we type git status after modifying a file to be ignored
To make sure certain files are being ignored we type git status after modifying a file to be ignored
- .gitignore only ignores files created after it was created
- So to ignore a file we either have to remove it from the git repo
- Or we have to create a new file/rename it 

We can track all the files by typing:
git add -A 
Or
git add --all



    Commiting and other stages
When all files are tracked it means are in an environment called "Staging"
- staging is like a holding pen until you're ready to commit
Commiting is just taking a snapshot of the repository
 at the current moment 

Sort of like writing an entry in a journal, we can always
go back and visit it

command for commiting:
git commit -m "Message"


To check the differences between the
last commit and the current state of the project
we type:
git diff
red text is old text, green is new text.

3 different stages:
    1. Working files: These are the untracked files
    2. Staging: In-between phase, files in this stage after using git add
    3. Commit: this is where we push it to the official repository on github

If we added a change (moved it to staging), but we don't
like the changes then we can use:
git restore --staged <fileName> (more than 1)

This doesn't actually remove the changes,
it just moves the file back to untracked


We can also skip the staging stage:
git commit <options> "message"


deleting a file completely (and not just from the repository):
    git rm <fileName>
The issue is that git tells us if we deleted a file


    Log
To check every commit, and it's corresponding information such
as the id, author, date and time we can use:
git log

 Adding --oneline option gives abbreviated info


We can use commit amend to change the message of
the a previous commit:
    git commit -m amend "NewMessage" --amend
The above changes the message of the last commit

We can also check the full details of the commits
including what was changed with:
    git log -p

getting help
    git help log

Getng back to previous commit:
    git reset <commitID>

Rebasing will show us how to edit how commits appear: 
    git rebase -i --root 
Colon + x returns to main terunal view

    Branches
Branches are copies of main branch
They have all the same code (when created ), so we can try to add new functionalities
or fix a bug without risking our main branch. When satisfied with changed
we can merge back to main branch


This is also how developers work on the same project on the same time
they can all work on seperate parts of the same project and then merge
the work together when they're done

Creating branch:
    git branch brancName

showing what branch you're in:
    git branch
Branch you're in is highlighted green and has a star

Switching:
    git switch branchName

git status tells us what branch we're in

to bring changes back to main branch:
We have to switch branches and then go to main
ex:
    git switch main
    git merge -m "back to main"

Deleting branch:
    git branch -d branchName



    Merge Conflicts
if we work on a branch, but the file we're Working
on in main has changed since we branched out from main
we'll have a merge conflict

creating a new branch and swiching to it at the same time:
    git switch -c branchName


    Resolving a conflict:
The part that says "head" refers to the current text in the main file
While the other text section will be whatever the branch you're
merging from is called (in our case it was testBranch)


This is our second test of merging different branches together
second test continued



    General Workflow
Current project with feature/bug
-> create branch to work on the bug
-> when satisifed with changes merge back to main
-> then you can delete your secondary branch unless you want to use it in the future



    Working with others
so far we've been working on git repo
hosted on personal computer. To work with others
we can host a repository on the cloud with a variety of
services (obviously by far the most popular is github)

When working with others everyone has their own branch
-whenever someone has a change that they want to add they 
merge their branch with the main

When working with others there's some things to look out for:
- Make sure to never work on the same files, or at the very least the same lines
This can cause merge conflicts, which suck especially on the scale of an entire project
- Make sure to commit relatively often so that 
Given enough time you'll have to work on a bunch different files
which significantly increases chances for merge conflicts



Github other features:
aside from git, you can:
- manage projectories
- track issues
- assign certain features/bugs to certain people
- etc

push to github (everything):
git push -all

